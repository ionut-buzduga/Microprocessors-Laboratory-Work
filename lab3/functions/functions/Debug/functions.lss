
functions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000612  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000229  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f8  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a2  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
   unsigned char vx2, vx1, vx0;
   
 
   unsigned char outs;
   unsigned char temp;
   DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0x00;
  70:	17 ba       	out	0x17, r1	; 23
   
   while(1){
     
      inputs=PINB;
  72:	96 b3       	in	r25, 0x16	; 22
      inputs=inputs & 0x07;
  74:	89 2f       	mov	r24, r25
  76:	87 70       	andi	r24, 0x07	; 7
      
      vx0=inputs & 1 << 0;
      vx1 = inputs >>1 & 1<< 0;
  78:	38 2f       	mov	r19, r24
  7a:	36 95       	lsr	r19
      vx2=  inputs >>2 & 1<< 0;
  7c:	28 2f       	mov	r18, r24
  7e:	26 95       	lsr	r18
  80:	26 95       	lsr	r18
      outs=0;
      
      //f0
      temp=vx2^vx1^vx0;
  82:	23 27       	eor	r18, r19
  84:	92 27       	eor	r25, r18
      if(temp & 1<<0)
  86:	90 fd       	sbrc	r25, 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
      inputs=inputs & 0x07;
      
      vx0=inputs & 1 << 0;
      vx1 = inputs >>1 & 1<< 0;
      vx2=  inputs >>2 & 1<< 0;
      outs=0;
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <main+0x24>
      
      //f0
      temp=vx2^vx1^vx0;
      if(temp & 1<<0)
         outs=outs | 1<<0;
  8e:	91 e0       	ldi	r25, 0x01	; 1

      //f1
      if(inputs <3)
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	08 f4       	brcc	.+2      	; 0x96 <main+0x2a>
         outs=outs | 1<<1;
  94:	92 60       	ori	r25, 0x02	; 2
      
      //f2
      if(inputs == 2 || inputs == 3 || inputs == 5 || inputs ==7)    
  96:	2e ef       	ldi	r18, 0xFE	; 254
  98:	28 0f       	add	r18, r24
  9a:	22 30       	cpi	r18, 0x02	; 2
  9c:	20 f0       	brcs	.+8      	; 0xa6 <main+0x3a>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	11 f0       	breq	.+4      	; 0xa6 <main+0x3a>
  a2:	87 30       	cpi	r24, 0x07	; 7
  a4:	09 f4       	brne	.+2      	; 0xa8 <main+0x3c>
         outs=outs | 1<<2;    
  a6:	94 60       	ori	r25, 0x04	; 4
    /*  temp=(~vx2&vx1) | (vx2&vx0);
      if(temp & 1<<0)
        outs=outs | 1<<2;
        */
      
      PORTA = outs;
  a8:	9b bb       	out	0x1b, r25	; 27
   }
  aa:	e3 cf       	rjmp	.-58     	; 0x72 <main+0x6>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
